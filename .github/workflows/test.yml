name: Django CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      tags:
        description: 'Test scenario tags'
        required: false

jobs:
  #  docs:
  #    name: Deploy docs
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout main
  #        uses: actions/checkout@v3
  #
  #      - name: Deploy docs
  #        uses: mhausenblas/mkdocs-deploy-gh-pages@master
  #        # Or use mhausenblas/mkdocs-deploy-gh-pages@nomaterial to build without the mkdocs-material theme
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #          CONFIG_FILE: ./mkdocs.yml
  #          REQUIREMENTS: ./docs/requirements.txt
  build:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ '3.11' ]
        poetry-version: [ '1.6.1' ]
    name: Build and test ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Run Tests
        run: |
          cd forum
          poetry run coverage run manage.py test --no-logs
      - name: Coverage report
        id: coverage_report
        shell: bash
        run: |
          mv forum/.coverage .
          cp forum/.coveragerc .
          echo 'REPORT<<EOF' >> $GITHUB_ENV         
          poetry run coverage report >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - uses: mshick/add-pr-comment@v1
        with:
          message: |
            Coverage report:
            ```
            ${{ env.REPORT }}
            ```
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false
      - name: json report
        run: |
          poetry run coverage json
          echo "COVERAGE=$(jq '.totals.percent_covered_display|tonumber' coverage.json)" >> $GITHUB_ENV
      - name: Create Awesome Badge
        if: ${{ github.ref == 'ref/heads/main' }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.COVERAGE_GIST_ID }}
          filename: wiwik.json
          label: Coverage
          message: ${{ env.COVERAGE }}%
          color: green