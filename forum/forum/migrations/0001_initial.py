# Generated by Django 4.2 on 2023-05-01 00:44

import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('badges', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('votes', models.IntegerField(default=0)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_accepted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='AnswerComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('votes', models.IntegerField(default=0)),
                ('content', models.TextField(max_length=300)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Answer Comment',
                'verbose_name_plural': 'Answer Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('votes', models.IntegerField(default=0)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('a', 'Open'), ('t', 'Triaged'), ('c', 'Closed'), ('d', 'Duplicate'), ('h', 'Hidden'), ('O', 'Off Topic'), ('N', 'Needs details or Clarity')], default='a', help_text='Post status', max_length=2)),
                ('status_updated_at', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(choices=[('q', 'Question'), ('a', 'Article'), ('h', 'How to')], default='q', help_text='Post type', max_length=2)),
                ('answers_count', models.IntegerField(default=0, help_text='Count number of answers')),
                ('views', models.IntegerField(default=0, help_text='Number of views for post')),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now, help_text='When was last activity created')),
                ('title', models.CharField(help_text='Post title', max_length=255)),
                ('is_anonymous', models.BooleanField(default=False, help_text='Is post anonymous?')),
                ('has_accepted_answer', models.BooleanField(default=False, help_text='Does post have an accepted answer?')),
                ('source', models.CharField(blank=True, choices=[('slack', 'Slack'), ('teams', 'Microsoft Teams')], help_text='Post source platform (slack, etc.)', max_length=10, null=True)),
                ('source_id', models.CharField(blank=True, help_text='id in the source platform', max_length=50, null=True)),
                ('link', models.URLField(blank=True, help_text='Link to post source in its originating platform', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionAdditionalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
            ],
            options={
                'default_related_name': 'additional_data',
            },
        ),
        migrations.CreateModel(
            name='QuestionBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('votes', models.IntegerField(default=0)),
                ('content', models.TextField(max_length=300)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Question Comment',
                'verbose_name_plural': 'Question Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionInviteToAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Question Invitations',
            },
        ),
        migrations.CreateModel(
            name='QuestionView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When was the post viewed')),
            ],
        ),
        migrations.CreateModel(
            name='SearchRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('query', models.CharField(help_text='Query user did', max_length=400)),
                ('results', models.CharField(help_text='questionIds results', max_length=50)),
                ('time', models.IntegerField(help_text='Time search has taken')),
            ],
        ),
        migrations.CreateModel(
            name='TagFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('questions_by_user', models.IntegerField(default=0, help_text='Number of questions authored by user in the tag')),
                ('answers_by_user', models.IntegerField(default=0, help_text='Number of answers authored by user in the tag')),
                ('reputation', models.IntegerField(default=0, help_text='Reputation earned by user for tag')),
                ('reputation_last_month', models.IntegerField(default=0, help_text='Reputation earned by user for tag in the past month')),
            ],
        ),
        migrations.CreateModel(
            name='VoteActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reputation_change', models.IntegerField(blank=True, default=None, help_text='Change in reputation for target user', null=True)),
                ('seen', models.DateTimeField(blank=True, default=None, help_text='When the target user has seen this activity', null=True)),
                ('answer', models.ForeignKey(blank=True, default=None, help_text='Answer that caused this, if relevant', null=True, on_delete=django.db.models.deletion.CASCADE, to='forum.answer')),
                ('badge', models.ForeignKey(blank=True, default=None, help_text='Badge on this activity', null=True, on_delete=django.db.models.deletion.CASCADE, to='badges.badge')),
                ('question', models.ForeignKey(blank=True, default=None, help_text='Question caused this', null=True, on_delete=django.db.models.deletion.CASCADE, to='forum.question')),
            ],
            options={
                'verbose_name_plural': 'Activities',
            },
        ),
    ]
