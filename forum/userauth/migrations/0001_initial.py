# Generated by Django 4.2 on 2023-05-01 00:44

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import userauth.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('badges', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ForumUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('name', models.CharField(blank=True, help_text='User displayed name', max_length=100, null=True)),
                ('title', models.CharField(blank=True, default='', help_text='Title of user at work, etc.', max_length=100, null=True)),
                ('about_me', models.TextField(blank=True, default=None, null=True)),
                ('profile_pic', models.ImageField(blank=True, default='default_pics/default_image.jpg', null=True, upload_to='user_pics')),
                ('github_handle', models.CharField(blank=True, default=None, help_text='User github handle', max_length=39, null=True)),
                ('keybase_user', models.CharField(blank=True, default=None, help_text='User github handle', max_length=16, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_moderator', models.BooleanField(default=False, help_text='Designates whether the user can moderate other user Q&A.', verbose_name='moderator status')),
                ('slack_userid', models.CharField(blank=True, default=None, help_text='Slack user id', max_length=25, null=True, unique=True)),
                ('email_notifications', models.BooleanField(default=True, help_text='email notifications enabled?')),
                ('reputation_score', models.IntegerField(default=0)),
                ('search_count', models.IntegerField(default=0, help_text='Number of searches user made')),
                ('bookmarks_count', models.IntegerField(default=0, help_text='Number of bookmarks user have')),
                ('last_email_datetime', models.DateTimeField(blank=True, help_text='Date+Time of email sent to user', null=True)),
                ('bronze_badges', models.IntegerField(default=0, help_text='Number of bronze badges the user has')),
                ('silver_badges', models.IntegerField(default=0, help_text='Number of silver badges the user has')),
                ('gold_badges', models.IntegerField(default=0, help_text='Number of gold badges the user has')),
                ('people_reached', models.IntegerField(default=0, help_text='Number of views posts user created had')),
                ('posts_edited', models.IntegerField(default=0, help_text='Number of posts user edited')),
                ('votes', models.IntegerField(default=0, help_text='Number of votes user casted')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('next_badge', models.ForeignKey(blank=True, help_text='Next badge recommended for user', null=True, on_delete=django.db.models.deletion.SET_NULL, to='badges.badge')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', userauth.models.ForumUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ForumUserAdditionalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reputation_score', models.IntegerField(default=0)),
                ('search_count', models.IntegerField(default=0, help_text='Number of searches user made')),
                ('bookmarks_count', models.IntegerField(default=0, help_text='Number of bookmarks user have')),
                ('last_email_datetime', models.DateTimeField(blank=True, help_text='Date+Time of email sent to user', null=True)),
                ('bronze_badges', models.IntegerField(default=0, help_text='Number of bronze badges the user has')),
                ('silver_badges', models.IntegerField(default=0, help_text='Number of silver badges the user has')),
                ('gold_badges', models.IntegerField(default=0, help_text='Number of gold badges the user has')),
                ('people_reached', models.IntegerField(default=0, help_text='Number of views posts user created had')),
                ('posts_edited', models.IntegerField(default=0, help_text='Number of posts user edited')),
                ('votes', models.IntegerField(default=0, help_text='Number of votes user casted')),
                ('next_badge', models.ForeignKey(blank=True, help_text='Next badge recommended for user', null=True, on_delete=django.db.models.deletion.SET_NULL, to='badges.badge')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'default_related_name': 'additional_data',
            },
        ),
        migrations.CreateModel(
            name='UserVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_date', models.DateField()),
                ('consecutive_days', models.IntegerField(default=1)),
                ('max_consecutive_days', models.IntegerField(default=1)),
                ('total_days', models.IntegerField(default=1)),
                ('ip_addr', models.CharField(blank=True, max_length=30, null=True)),
                ('country', models.CharField(blank=True, max_length=40, null=True)),
                ('city', models.CharField(blank=True, max_length=40, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User visits',
                'unique_together': {('user', 'visit_date', 'ip_addr')},
            },
        ),
    ]
